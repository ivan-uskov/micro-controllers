<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Dmitry L. Smirnoff (C) 2001">
<link REL="stylesheet" HREF="(Styles).css" TYPE="text/css">
<title>2.1.1. Регистры общего назначения</title>
</head>

<body background="(Фон).gif">

<hr>

<p>Восемь 32-битных регистров общего назначения
применяются для хранения данных и/или адресов.
Буква Е в названии регистров означает
&quot;расширенный&quot; (Extended). Отметим, что для всех
регистров общего назначения допускается
указывать в командах их младшие 16-битные
половины - регистры АХ, ВХ, СХ, DX, SP, BP, SI, DI. Кроме
того, в первых четырех регистрах общего
назначения отдельно адресуются старшие (High) и
младшие (Low) байты младших 16-битных половин -
регистры АН, ВН, СН, DH и AL, BL, CL, DL. Старшие половины,
т.е. биты 31-16, регистров общего назначения
адресовать нельзя. Таким образом, первые четыре
регистра общего назначения позволяют процессору
легко оперировать байтами, словами и двойными
словами.</p>

<p>Регистры общего назначения единообразно
участвуют в командах манипуляций данными и
применяются в различных режимах адресации.
Начиная с процессора i80386 эти регистры в стали
&quot;еще более общими&quot;, чем в процессорах 8086/80286,
так как все первые четыре регистра общего
назначения теперь можно привлекать для
адресации операндов в памяти. Вместе с тем,
каждый из регистров общего назначения в
некоторых командах выполняет специальные
функции, что нашло отражение в названиях
регистров. Рассмотрим типичные функции
32/16/8-битных регистров общего назначения. 

<ul>
  <li><b>EAX/AX/AL</b> - аккумулятор (Accumulator). Этот регистр
    наиболее часто применяется для хранения
    промежуточных данных. Многие команды оперируют
    данными в аккумуляторе несколько быстрее, чем в
    других регистрах. В операциях умножения/деления
    аккумулятор содержит множимое/делимое до
    выполнения операции и произведение/частное
    после операции. В командах ввода-вывода с
    привлечением портов аккумулятор хранит
    вводимые/выводимые данные. Вся десятичная
    арифметика выполняется только с участием
    аккумулятора AL.</li>
  <li><b>ЕВХ/ВХ</b> - базовый регистр (Base). Применяется для
    указания базового (начального) адреса объекта
    данных в памяти, а также содержит базовый адрес
    таблицы в команде преобразования символов <i>xlat</i>.</li>
  <li><b>ECX/CX/CL</b> - регистр-счетчик (Counter). Участвует в
    качестве счетчика в некоторых командах, которые
    производят повторяющиеся операции, например
    сдвиги или манипуляции цепочками.</li>
  <li><b>EDX/DX</b> - регистр данных (Data). Наиболее часто
    привлекается для хранения промежуточных данных,
    а также в командах умножения и деления (совместно
    с аккумулятором). Кроме того, в командах
    ввода-вывода регистр DX содержит адрес порта, к
    которому производится обращение.</li>
  <li><b>ESP/SP</b> - указатель стека (Stack Pointer). Этот регистр
    неявно используется в командах <i>push</i> (включения в
    стек) и <i>pop</i> (извлечения из стека), а также в других
    стековых операциях, которые процессор
    автоматически выполняет при обработке
    прерываний и особых случаев, а также в командах
    <i>call</i> (вызова подпрограммы), <i>ret</i> (возврата из
    подпрограммы) и <i>iret</i> (возврата из прерывания).
    Регистр ESP (SP) адресует вершину стека в текущем
    сегменте стека.</li>
  <li><b>ЕВР/ВР</b> - указатель базы (Base Pointer).
    Предназначен для удобного доступа к объектам
    данных, находящимся в стеке, например, к
    параметрам подпрограмм.</li>
  <li><b>ESI/SI</b> - индекс источника (Source Index). Выполняет
    функцию регистра адреса, в частности, при
    производстве цепочечных операций адресует
    текущий элемент цепочки-источника.</li>
  <li><b>EDI/DI</b> - индекс получателя или приемника (Destination
    Index). Выполняет функцию регистра адреса, в
    частности, при производстве цепочечных операций
    адресует текущий элемент цепочки-получателя.</li>
</ul>

<hr>

<p>Следующий раздел - “<a href="02-12.htm">2.1.2. Сегментные
регистры</a>”</p>
</body>
</html>
