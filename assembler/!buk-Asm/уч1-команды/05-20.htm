<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Dmitry L. Smirnoff (C) 2001">
<link REL="stylesheet" HREF="(Styles).css" TYPE="text/css">
<title>5.2. Арифметические команды</title>
</head>

<body background="(Фон).gif">

<hr>

<p>Процессоры семейства i80x86 имеют широкий набор
команд арифметических операций,
что позволяет применять их в
сложных системах обработки данных.
Арифметические операции
выполняются над целыми числами
четырех типов: беззнаковыми
(порядковыми) двоичными, знаковыми
двоичными, упакованными и
неупакованными десятичными.</p>

<p>Размер беззнаковых двоичных
чисел составляет 8/16/32 бита и все они
считаются значащими, т.е.
учитываются при определении
значения числа. Диапазон 8-битных
чисел составляет от 0 до 255, 16-битных
- от 0 до 65535 и 32-битных - от 0 до 4294967295.
Имеются команды сложения,
вычитания, умножения и деления
чисел в таких форматах.</p>

<p>Знаковые двоичные числа имеют
размер 8/16/32 бита и представляются в
стандартном дополнительном коде.
Диапазон значений для них
составляет от -128 до +127 (байт), от -32768
до +32767 (слово) и от -2147483648 до +2147483647
(двойное слово). Для таких чисел
имеются специальные команды
умножения и деления, а сложение и
вычитание благодаря
дополнительному коду реализуются
теми же командами, что и для
беззнаковых чисел.</p>

<p>При выполнении арифметических
операций признаки получающихся
результатов фиксируются в шести
арифметических флажках регистра
EFlags: CF, PF, AF, ZF, SF и OF. Состояние любого флажка (кроме
AF) и некоторых комбинаций флажков
можно проверить командами
условного перехода. Предусмотрена
также команда IntO для генерации
прерывания при переполнении.</p>

<h1>1. Команды сложения</h1>

<p>Две основные команды собственно
сложения <i>add</i> и сложения с переносом
<i>adc</i> (от англ. - <i>ADd with Carry</i>) имеют такой общий вид:</p>

<pre>
	add  dst,src			;dst = dst + src
	adc  dst,src			;dst = dst + src + CF
</pre>

<p>Команда <i>add</i> производит сложение
операндов <i>dst</i> и <i>src</i> и помещает сумму на
место <i>dst</i>, т.е. источник прибавляется
к получателю. В команде <i>adc</i>, кроме
этого действия, в младший бит суммы
<i>dst</i> и <i>src</i> прибавляется значение флажка
переноса CF. Наличие команды <i>adc</i>
позволяет просто реализовать
суммирование операндов любого
размера с правильным учетом
переносов. Когда получателем
выступает аккумулятор EAX/AX/AL, длина
команды по сравнению со
стандартной сокращается на один
байт.</p>

<p>Операнды команд <i>add</i> и <i>adc</i> допускают
разнообразные формы, которые
приведены ниже для команды <i>add</i>:</p>

<pre>
	add reg/mem,imm		;Размеры 8/16/32 бита
	add reg,reg/mem		;Размеры 8/16/32 бита
	add mem/reg,reg		;Размеры 8/16/32 бита
	add reg/meml6,imm8		;Попучатель 16 бит, константа-источник 8 бит
	add reg/mem32,imm8		;Получатель 32 бита, константа-источник 8 бит
</pre>

<p>В двух последних формах размер
непосредственного операнда меньше
размера получателя. Для
образования правильного результата
до производства сложения источник
расширяется со знаком до размера
получателя.</p>

<p>При использовании команд <i>add</i> и <i>adc</i>
необходимо отчетливо представлять
смысл флажка переноса CF. При
сложении операндов как беззнаковых
чисел состояние CF = 1
свидетельствует о том, что
произошло переполнение, а при
сложении знаковых чисел состояние
флажка CF не содержит полезной
информации. Переполнение для таких
чисел фиксируется по флажку OF.</p>

<p>К командам сложения относят также
команду инкремента <i>inc</i> (от англ. - <i>INCrement</i>), т.е.
увеличения значения на 1:</p>

<pre>
	inc dst				;dst = dst + 1
</pre>

<p>Операндом команды <i>inc</i> может быть
содержимое регистра или ячейки
памяти:</p>

<pre>
	inc reg/mem			;Размер операнда 8/16/32 бита
</pre>

<p>Команда <i>inc dst</i> во всех отношениях
эквивалентна команде <i>add dst,1</i> за
исключением того, что она не
воздействует на флажок переноса CF и имеет меньший размер.
Обычно команда <i>inc</i> применяется для
модификации адресов, поэтому
неизменность флажка переноса часто
оказывается очень удобной.</p>


<h1>2. Команды вычитания</h1>

<p>Две основные команды собственно вычитания <i>sub</i> (от англ. - <i>SUBtraction</i>)
и вычитания с заемом <i>sbb</i> (от англ. - <i>SuBtraction with Borrow</i>) имеют такой общий вид:</p>

<pre>
	sub  dst,src			;dst = dst - src
	sbb  dst,src			;dst = dst - src - CF
</pre>

<p>Команда <i>sub</i> производит вычитание источника <i>src</i> из получателя
<i>dst</i> и помещает разность на место <i>dst</i>, т.е. источник
вычитается из получателя. В команде <i>sbb</i> кроме этого действия из
младшего бита разности вычитается значение флажка переноса CF.
(Напомним, что в операции вычитания флажок CF превращается
во флажок заема.) Наличие команды <i>sbb</i> позволяет просто реализовать
вычитание чисел любого размера. Когда получателем определен
аккумулятор, длина команд сокращается на один байт по
сравнению со стандартной.</p>

<p>Операнды команд <i>sub</i> и <i>sbb</i> допускают разнообразные формы,
которые приведены ниже для команды <i>sub</i>:</p>

<pre>
	sub reg/mem,imm		;Размеры 8/16/32 бита
	sub reg,reg/mem		;Размеры 8/16/32 бита
	sub mem/reg,reg		;Размеры 8/16/32 бита
	sub reg/meml6,imm8		;Попучатель 16 бит, константа-источник 8 бит
	sub reg/mem32,imm8		;Получатель 32 бита, константа-источник 8 бит
</pre>

<p>В двух последних формах размер непосредственного операнда
меньше размера получателя. Для образования правильной разности
до производства вычитания источник расширяется со знаком до
размера получателя.</p>

<p>К командам вычитания относится также команда декремента
<i>dec</i> (от англ. - <i>DECrement</i>), т.е. уменьшения значения на 1:</p>

<pre>
	dec dst				;dst = dst - 1
</pre>

<p>Операнд команды может находиться в регистре или ячейке памяти:</p>

<pre>
	dec reg/mem			;Размер операнда 8/16/32 бита
</pre>

<p>Команда <i>dec dst</i> во всех отношениях аналогична команде <i>sub dst,1</i>
за исключением того, что она не воздействует на флажок переноса CF
и имеет меньший размер.</p>

<p>Команда изменения знака или образования дополнительного
кода <i>neg</i> (от англ. - <i>NEGate</i>) имеет такое общее представление:</p>

<pre>
	neg dst				;dst = 0 - dst
</pre>

<p>Ее операнд может находиться в регистре или ячейке памяти:</p>

<pre>
	neg reg/mem			;Размер операнда 8/16/32 бита
</pre>

<p>При выполнении команды <i>neg</i> инвертируется каждый бит операнда,
а затем производится инкремент результата.</p>

<p>Команда сравнения <i>cmp</i> (от англ. - <i>СоМРаre</i>) имеет следующее общее представление:</p>

<pre>
	cmp dst,src			;dst - src
</pre>

<p>Эта команда очень похожа на команду вычитания <i>sub</i> и имеет аналогичные
формы. Единственное ее отличие заключается в том, что результат
вычитания нигде не сохраняется, т.е. производится так называемое
неразрушающее сравнение операндов. Состояния всех флажков определяются
получаемой разностью и их можно проверить командами условных переходов.
Нужно отчетливо представлять себе состояния арифметических флажков
после выполнения команды сравнения, чтобы выбрать правильную команду
условного перехода. Состояния флажков для знаковых и беззнаковых операндов
приведены в табл.1.</p>

<div align="center"><center>

<table WIDTH="80%" BgColor="#C0C0C0" BorderColorLight="#FFFFFF" BorderColorDark="#000000"
BORDER="2" RULES="ALL">
  <caption>Таблица 1. Состояние флажков после команд вычитания и сравнения</caption>
  <tr>
    <td WIDTH="30%" VALIGN="top" bgcolor="#00FFFF">Отношение</td>
    <td WIDTH="30%" VALIGN="top" bgcolor="#00FFFF">Числа со знаком</td>
    <td WIDTH="30%" VALIGN="top" bgcolor="#00FFFF">Числа без знака</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="top"><i>dst &gt; src</i></td>
    <td WIDTH="30%" VALIGN="top">ZF=0, SF=OF</td>
    <td WIDTH="30%" VALIGN="top">ZF=0, CF=0</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="top"><i>dst &gt;= src</i></td>
    <td WIDTH="30%" VALIGN="top">SF=OF</td>
    <td WIDTH="30%" VALIGN="top">CF=0</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="top"><i>dst = src</i></td>
    <td WIDTH="30%" VALIGN="top">ZF=1</td>
    <td WIDTH="30%" VALIGN="top">ZF=1</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="top"><i>dst &lt;= src</i></td>
    <td WIDTH="30%" VALIGN="top">ZF=1, SF&ne;OF</td>
    <td WIDTH="30%" VALIGN="top">ZF=1, CF=1</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="top"><i>dst &lt; src</i></td>
    <td WIDTH="30%" VALIGN="top">SF&ne;OF</td>
    <td WIDTH="30%" VALIGN="top">CF=1</td>
  </tr>
</table>
</center></div>

<h1>3. Команды умножения</h1>

<p>.
</p>

<hr>

<p>Следующий раздел - “<a href="05-30.htm">5.3. Команды логических операций и сдвигов</a>”</p>
</body>
</html>
