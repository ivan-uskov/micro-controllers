<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Dmitry L. Smirnoff (C) 2001">
<link REL="stylesheet" HREF="(Styles).css" TYPE="text/css">
<title>3.2. Выравнивание данных в памяти</title>
</head>

<body background="(Фон).gif">

<hr>

<p>Имеется еще один вопрос о размещении данных в
памяти с учетом особенностей ее аппаратной
реализации. Шина данных у 32-разрядных процессоров имеет 32 линии
D<sub>31</sub> - D<sub>0</sub> и при любом обращении к памяти
по шине передается 32-битное значение (т.е. 4 байта).
При этом 32-битный адрес памяти A<sub>31</sub> - А<sub>0</sub>
можно интерпретировать таким образом, что
старшие 30 бит A<sub>31</sub> - А<sub>2</sub> определяют
двойное слово в памяти, а младшие биты A<sub>1</sub> - А<sub>0</sub>
выбирают байт в этом двойном слове (см. рис.1).</p>

<h3><img src="03-02-рис01.gif"><br>
Рис.1. Двойное слово в памяти</h3>

<p>Естественно, операнд размером в 1 байт может
иметь любой адрес от 0 до 2<sup>32</sup>-1 и он всегда
считывается/записывается за один цикл шины.
Однако, если допустить размещение по любому
адресу слова или двойного слова, то в некоторых
ситуациях для обращения к ним потребуются два
цикла шины. Например, на рис.2 показано размещение
<b>двойного слова</b>, состоящего из байт Б0, Б1, Б2 и БЗ,
по адресу А=ХХ ... Х11b (где Х=0 или 1), у которого
два младших бита равны единице. Для считывания
этого двойного слова процессору i80x86 потребуются два обращения к
памяти по адресам А и А + 1. Аналогичная ситуация
возникает и при хранении <b>слова</b> по этому же адресу
А (байты БО и Б1).</p>

<h3><img src="03-02-рис02.gif"><br>
Рис.2. Размещение двойного слова, требующее два
цикла шины</h3>

<p>В общем случае, процессор i80x86 не накладывает
ограничений на размещение данных в памяти и при
необходимости автоматически формирует два цикла
шины. Однако его производительность несколько
повышается, если программист размещает слова по
четным адресам, а двойные слова по адресам,
кратным четырем. Такой прием называется
выравниванием по границам слов и двойных слов.</p>

<p>Следует отметить, что выравнивание особенно
важно для стека, который очень активно
используется в любых программах и работает
только со словами или двойными словами.</p>

<hr>

<p>Следующий раздел - “<a href="03-03.htm">3.3. Адресация
памяти в реальном режиме</a>”</p>
</body>
</html>
