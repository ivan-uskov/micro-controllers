<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Dmitry L. Smirnoff (C) 2001">
<link REL="stylesheet" HREF="(Styles).css" TYPE="text/css">
<title>3.3. Адресация памяти в реальном режиме</title>
</head>

<body background="(Фон).gif">

<hr>

<p>Для реального режима работы процессоров
семейства i80x86 характерны следующие особенности: 

<ul>
  <li><b>В программах используется
    двухкомпонентный логический адрес</b> для
    доступа к ячейкам памяти. Он состоит из двух
    16-разрядных компонент - <b>базового адреса
    сегмента</b> и <b>смещения в пределах сегмента</b>.
    Для получения физического адреса сегментная
    часть сдвигается влево на 4 бита (умножается на 16),
    а затем суммируется со смещением.</li>
  <li><b>Применяется 20-разрядный физический адрес
    ячейки памяти</b>. При работе в реальном режиме
    на шине адреса используются младшие адресные
    линии A<sub>0</sub>-A<sub>19</sub>, остальные линии
    блокируются (т.е. принудительно устанавливаются
    в состояние “0”) внешними по отношению к
    процессору схемами компьютера. Имеется
    возможность снять блокировку с адресной линии A<sub>20</sub>,
    благодаря чему появляется один неполный (64 Кбайт
    без 16 байт) сегмент памяти, лежащий выше границы в
    1 Мбайт. Этот дополнительный сегмент называется
    областью верхней памяти - HMA (от англ. <em>High Memory Area</em>).
    Он может использоваться операционной MS-DOS для
    размещения в нем ее данных.</li>
</ul>

<p>Под сегментом понимается блок смежных ячек
памяти (в адресном пространстве 1 Мбайт) с
максимальным размером 64 Кбайт и начальным или
базовым адресом, находящимся на 16-байтной
границе (такая граница называется параграфом).
Для обращения к памяти необходимо определить
базу сегмента и 16-битное расстояние от базы,
называемое смещением (offset) или относительным
адресом. Базовые адреса одновременно
доступных программе сегментов находятся в
сегментных регистрах кода CS, данных DS, стека SS и
дополнительных данных ES, FS и GS. Каждый из них
имеет длину 16 бит, но можно считать сегментный
регистр 20-битным, так как четыре младших бита
базового адреса всегда содержат нули. Таким
образом, две 16-битных величины (указателя),
соответствующие базовому адресу сегмента (с
подразумеваемыми младшими нулями) и смещению,
позволяют обращаться ко всему адресному
пространству 1 Мбайт (см. рис.1).</p>

<h3><img src="03-03-рис01.gif"><br>
Рис.1. Сегментация памяти в реальном режиме</h3>

<p>Отметим, что сегментные регистры содержат
физические адреса памяти, т.е. значение в каждом
сегментном регистре прямо указывает на границу
параграфа в адресном пространстве 1 Мбайт. В
защищенном режиме процессоров i80x86 значение в
сегментном регистре не имеет прямой взаимосвязи
с физическим адресом в памяти.</p>

<p>Чтобы упростить обращения к памяти, за каждой
командой закреплен сегментный регистр по
умолчанию, который привлекается без специальных
указаний. Так, команды всегда выбираются из
сегмента кода (указателями служат регистры CS и IP),
все стековые операции выполняются в сегменте
стека (с помощью регистров SS:SP и SS:BP), данные или
переменные программы находятся в сегменте
данных (база сегмента находится в регистре DS, а
смещение, называемое эффективным адресом ЕА,
определяется режимом адресации).</p>

<p>Для обращения к другим сегментам перед
командой помещается префикс замены сегмента.
Например, команда <i>mov АХ,[100h]</i> загружает в
регистр АХ слово из сегмента, базовый адрес
которого находится в регистре DS, а смещение равно
100h. Команда с префиксом замены сегмента <i>mov
АХ,[ES:100h]</i> будет обращаться к дополнительному
сегменту данных, базовый адрес которого
находится в регистре ES.</p>

<p>Преобразование пары сегмент:cмещение,
называемой также логическим адресом, в
физический адрес осуществляется довольно
просто: содержимое сегментного регистра
сдвигается влево на четыре бита (что
эквивалентно умножению на 16), а затем суммируется
со смещением. Например, если регистр DS содержит
1234h, а регистр SI содержит 5678h, то физический адрес
в команде <i>mov АХ,[SI]</i> будет равен</p>

<p><i>PA = DS*16 + SI = 12340h + 5678h = 179B8h</i></p>

<p>Отметим два обстоятельства, связанные с
сегментацией памяти в реальном режиме. Во-первых,
преобразование логического адреса в физический
всегда однозначно, т.е. каждому логическому
адресу соответствует уникальный физический
адрес. Однако обратное преобразование
неоднозначно: каждому физическому адресу
соответствуют 4К (4096) логических адресов. Поэтому
во всех процессорах фирмы Intel манипуляции
физическими адресами осуществляются довольно
сложно. Во-вторых, в этом способе формирования
физического адреса может возникнуть
своеобразное переполнение. Пусть, например,
регистр DS содержит число 0FFFFh. Тогда в команде <i>mov
АХ,[3000h]</i> физический адрес будет равен</p>

<p><i>PA = DS*16 + 3000h = 0FFFF0h + 3000h = 102FF0h</i></p>

<p>В такой ситуации процессор просто отбрасывает
старший 21-й бит адреса и выдает на шину адрес 02FF0h.
Другими словами, здесь происходит так называемое
“заворачивание” или “закругление” (wrap around)
адреса: от адреса 0FFFFFh происходит переход к
нулевому адресу.</p>

<p>Таким образом, простая сегментация памяти в
реальном режиме работы процессоров семейства
i80x86 обладает следующими особенностями, которые в
известном смысле можно считать ее недостатками,
усложняющими разработки мультизадачных систем.

<ol>
  <li>Сегменты памяти, определяемые только одними
    сегментными регистрами, имеют всего два
    атрибута: начальный адрес, находящийся на
    границе параграфа, и максимальный размер 64 Кбайт.
    Никаких аппаратных средств контроля
    правильности использования сегментов нет.</li>
  <li>Размещение сегментов в памяти произвольно:
    сегменты могут частично или полностью
    перекрываться или не иметь общих частей.</li>
  <li>Программа может обращаться к любому сегменту
    для считывания и записи данных, а также для
    выборки команд. В более общем плане, программа
    может обратиться по любому физическому адресу, а
    для защиты определенных областей памяти от
    несанкционированного доступа требуются внешние
    по отношению к процессору схемы.</li>
  <li>Нет никаких препятствий для обращения даже к
    физически несуществующей памяти. Когда
    программа выдает адрес несуществующей памяти,
    результат зависит только от особенностей схем
    дешифрирования адреса и управления внешней
    шиной: процессор может получить фиктивные
    данные, будет сформирован сигнал прерывания или
    система может просто зависнуть в ожидании
    данных, которые никогда не будут возвращены.</li>
</ol>

<p>С учетом этих недостатков сегментация памяти
сначала в процессоре i80286, а затем и в процессорах
i80386, i80486 и Pentium была значительно
усовершенствована. В этих процессорах имеются
гибкие средства организации сегментов с большим
числом атрибутов и эффективные механизмы
контроля и защиты доступа к сегментам. Кроме
того, применяется внутренний механизм
страничной организации памяти, который
позволяет еще более гибко управлять ресурсами
памяти компьютера.</p>

<hr>

<p>Следующий раздел - “<a href="03-04.htm">3.4.Базовые типы данных</a>”</p>
</body>
</html>
